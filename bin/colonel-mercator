#!/usr/bin/env node

var argv = require('minimist')(
    process.argv.slice(2),
    {
        'default': {
            snap: false,
            maxres: 0,
            upzoom: 3,
            zoombreaks: '[13, 10, 7, 4]'
        }
    });

var colonel_mercator = require('..'),
    path = require('path');

var filepath, snap, maxres, breaks, subcommand, res, zoombreaks, upzoom;

// Usage:
// colonel-mercator resolution <file> [--snap --maxres <float>]
// colonel-mercator metatile <resolution> [--zoombreaks <array of ints> --upzoom <int>

if (argv._[0] != 'resolution' && argv._[0] != 'metatile') {
    returnError('Invalid subcommand');
} else {
    subcommand = argv._[0];
}

if (subcommand === 'resolution') {
    // resolution: gets the resolution of a tif
    if (argv._.length != 2) {
        returnError('Usage: colonel-mercator resolution <file> <opts>');
    } else {
        filepath = path.resolve(argv._[1]);
    }

    if (argv.snap !== false) {
        try {
            snap = parseFloat(argv.snap)
            if (isNaN(snap) || snap < 0 || snap > 1) {
                returnError('Snap must be a number between 1 and 0')
            }
        } catch(err) {
            returnError(err);
        }
    } else {
        snap = argv.snap
    }

    try {
        maxres = parseFloat(argv.maxres);
    } catch(err) {
        returnError(err);
    }

    colonel_mercator.drill_raster(filepath, maxres, snap, function(err, pixel) {
      if (err) returnError(err);
      console.log(pixel[0])
    });

} else if (subcommand === 'metatile') {
    if (argv._.length != 2) {
        returnError('Usage: colonel-mercator metatile <res> <opts>');
    } else {
        try {
            res = parseFloat(argv._[1]);
        } catch(err) {
            returnError(err);
        }
    }

    try {
        zoombreaks = JSON.parse(argv.zoombreaks);
    } catch(err) {
        returnError(err);
    }

    try {
        upzoom = parseInt(argv.upzoom)
    } catch(err) {
        returnError(err);
    }

    colonel_mercator.get_scene_zoom(res, zoombreaks, upzoom, function(err, metatileZoom) {
        if (err) returnError(err);
        console.log(JSON.stringify(metatileZoom));
    });
}

function returnError(err) {
    console.error(err);
    process.exit(1);
}